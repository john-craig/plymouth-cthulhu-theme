/*------------ Constants ------------*/
NUM_GLYPHS = 35;


/*------------ Callbacks ------------*/

fun background_setup()
  {
    #Set cthulhu image as background
    cthulhu_image = Image("cthulhu.png");

    screen_ratio = Window.GetHeight() / Window.GetWidth();
    cthulhu_image_ratio = cthulhu_image.GetHeight() / cthulhu_image.GetWidth();

    if (screen_ratio > cthulhu_image_ratio)
      {  # Screen ratio is taller than image ratio, we will match the screen height
        scale_factor =  Window.GetHeight() / cthulhu_image.GetHeight();
      }
    else
      {  # Screen ratio is wider than image ratio, we will match the screen width
        scale_factor =  Window.GetWidth() / cthulhu_image.GetWidth();
      }

    scaled_cthulhu_image = cthulhu_image.Scale(cthulhu_image.GetWidth()  * scale_factor,
                                            cthulhu_image.GetHeight() * scale_factor);
    cthulhu_sprite = Sprite(scaled_cthulhu_image); # Create the a sprite using the scaled image

    cthulhu_sprite.SetX(Window.GetWidth()  / 2 - scaled_cthulhu_image.GetWidth () / 2); # Place in the centre
    cthulhu_sprite.SetY(Window.GetHeight() / 2 - scaled_cthulhu_image.GetHeight() / 2);
    cthulhu_sprite.SetZ(-10000); # Place right at the back
  }

fun dialog_setup()
  {

    local.box;
    local.lock;
    local.entry;
    local.glyphs;
    
    box.image = Image("box.png");
    lock.image = Image("lock.png");
    entry.image = Image("entry.png");
    
    //Set box position
    box.sprite = Sprite(box.image);
    box.x = Window.GetWidth()  / 2 - box.image.GetWidth ()/2;
    box.y = Window.GetHeight() / 2 - box.image.GetHeight()/2;
    box.z = 10000;
    box.sprite.SetPosition(box.x, box.y, box.z);
    
    //Set lock position
    lock.sprite = Sprite(lock.image);
    lock.x = box.x - lock.image.GetWidth();
    lock.y = box.y + box.image.GetHeight()/2 - lock.image.GetHeight()/2;
    lock.z = box.z + 1;
    lock.sprite.SetPosition(lock.x, lock.y, lock.z);
    
    //Set entry position... not sure I'm going to use this, ultimately
    entry.sprite = Sprite(entry.image);
    entry.x = lock.x + lock.image.GetWidth();
    entry.y = box.y + box.image.GetHeight()/2 - entry.image.GetHeight()/2;
    entry.z = box.z + 1;
    entry.sprite.SetPosition(entry.x, entry.y, entry.z);
    
    //Load all possible bullets
    for ( index = 0; index < NUM_GLYPHS; index++ )
      {
        glyphs[index].image = Image("bullet" + index + ".png");
      }

    global.dialog.box = box;
    global.dialog.lock = lock;
    global.dialog.entry = entry;
    global.dialog.glyphs = glyphs;
    dialog_opacity (1);
  }

fun dialog_opacity(opacity)
  {
    dialog.box.sprite.SetOpacity (opacity);
    dialog.lock.sprite.SetOpacity (opacity);
    dialog.entry.sprite.SetOpacity (opacity);
    for (index = 0; dialog.bullet[index]; index++)
      {
        dialog.bullet[index].sprite.SetOpacity(opacity);
      }
  }

fun display_normal_callback ()
  {
    global.status = "normal";
    if (global.dialog)
      dialog_opacity (0);
  }

fun display_password_callback (prompt, bullets)
  {
    global.status = "password";
    if (!global.dialog)
	dialog_setup();
    else
	dialog_opacity(1);
    for (index = 0; dialog.bullet[index] || index < bullets; index++)
      {
        if (!dialog.bullet[index])
          {
            //Get random glyph
            glyph = Math.Int(Math.Random() * NUM_GLYPHS);
            dialog.bullet[index].sprite = Sprite(dialog.glyphs[glyph]);

            dialog.bullet[index].x = dialog.entry.x + index * dialog.glyphs[glyph].GetWidth();
            dialog.bullet[index].y = dialog.entry.y + dialog.entry.image.GetHeight() / 2 - dialog.glyphs[glyph].GetHeight() / 2;
            dialog.bullet[index].z = dialog.entry.z + 1;
            dialog.bullet[index].sprite.SetPosition(dialog.bullet[index].x, dialog.bullet[index].y, dialog.bullet[index].z);
          }
        if (index < bullets)
          dialog.bullet[index].sprite.SetOpacity(1);
        else
          dialog.bullet[index].sprite.SetOpacity(0);
      }
  }

fun quit_callback ()
{
}

/*------------ Set callbacks ------------*/

status = "normal";
background_setup();

Plymouth.SetDisplayNormalFunction(display_normal_callback);
Plymouth.SetDisplayPasswordFunction(display_password_callback);
Plymouth.SetQuitFunction(quit_callback);